# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

import argparse
import subprocess

from cve_bin_tool import CVE_BIN_TOOL
from generate_sarif import GenerateSarif


def main():
    parser = argparse.ArgumentParser(
        prog="scanner",
        description="CVE Binary Tool GitHub Action Scanner",
    )

    parser.add_argument("directory", help="Directory to scan", nargs="?", default=".")
    parser.add_argument(
        "--scan-mode",
        help="Valid scan modes are both, repo-only, sbom-only",
        action="store",
        default="repo-only",
        choices=["repo-only", "sbom-only", "both"],
        required=False,
    )
    parser.add_argument("--repo", help="GitHub project repository name", required=True)
    parser.add_argument("--run-id", help="GitHub workflow run id", required=True)
    parser.add_argument("--sarif-output", help="Sarif output filename", required=True)
    parser.add_argument(
        "--html-pdf-output",
        help="HTML/PDF output filename (without extension)",
        required=True,
    )
    parser.add_argument(
        "--sbom-output",
        help="SBOM output filename (without extension)",
        required=True,
    )
    parser.add_argument(
        "--sbom-type",
        help="Valid SBOM types are spdx, cyclonedx",
        action="store",
        default="spdx",
        choices=["spdx", "cyclonedx", ""],
        required=False,
    )
    parser.add_argument(
        "--sbom-format",
        help="Valid SBOM formats are tag, json, yaml",
        action="store",
        default="json",
        choices=["tag", "json", "yaml", ""],
        required=False,
    )
    parser.add_argument(
        "--nvd-api-key", help="NVD API key for downloading CVE DB", required=False
    )
    parser.add_argument(
        "--exclude-dir", help="Exclude directories while scanning", required=False
    )
    parser.add_argument(
        "--build-command", help="Run build commands before scanning", required=False
    )
    parser.add_argument(
        "--alerts-based-on-file",
        help="Split security alerts based on source file.",
        required=False,
    )
    parser.add_argument(
        "--triage-input-file",
        help="Provide input filename for triage data.",
        required=False,
    )
    parser.add_argument(
        "--filter-triage",
        help="Filter vulnerabilities based on triage data.",
        default=False,
        required=False,
    )

    args = parser.parse_args()
    args.filter_triage = args.filter_triage.lower() == "true"
    if args.build_command:
        build_output = subprocess.run(
            args.build_command, capture_output=True, text=True, shell=True
        )
        print(build_output.stdout)
        if build_output.stderr:
            print(build_output.stderr)
            exit(1)

    cve_bin_tool = CVE_BIN_TOOL()
    cve_bin_tool.update_db(args.nvd_api_key)

    if not args.sbom_type:
        args.sbom_type = "spdx"
    if not args.sbom_format:
        args.sbom_format = "json"

    output_extension = "json"
    if args.sbom_type == "spdx":
        if args.sbom_format == "json":
            output_extension = "spdx.json"
        elif args.sbom_format == "tag":
            output_extension = "spdx"
        elif args.sbom_format == "yaml":
            output_extension = "spdx.yml"

    available_fixes = cve_bin_tool.scan(
        args.directory,
        scan_mode=args.scan_mode,
        formats=["html", "pdf", "json"],
        output=args.html_pdf_output,
        exclude=args.exclude_dir,
        sbom_type=args.sbom_type,
        sbom_format=args.sbom_format,
        sbom_output=f"{args.sbom_output}.{output_extension}",
        triage_input_file=args.triage_input_file,
    )

    gen_sarif = GenerateSarif(
        repository=args.repo,
        action_run_id=args.run_id,
        json_file_path=f"{args.html_pdf_output}.json",
        html_file_path=f"{args.html_pdf_output}.html",
        available_fixes=available_fixes,
        alerts_based_on_file=args.alerts_based_on_file == "true",
        filter_triage=args.filter_triage,
    )
    gen_sarif.write_file(
        output_file=args.sarif_output,
    )


if __name__ == "__main__":
    main()
