# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

import argparse
import subprocess

from cve_bin_tool import CVE_BIN_TOOL
from generate_sarif import GenerateSarif

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="scanner",
        description="CVE Binary Tool GitHub Action Scanner",
    )

    parser.add_argument("directory", help="Directory to scan", nargs="?", default=".")
    parser.add_argument("--repo", help="GitHub project repository name", required=True)
    parser.add_argument("--run-id", help="GitHub workflow run id", required=True)
    parser.add_argument("--sarif-output", help="Sarif output filename", required=True)
    parser.add_argument(
        "--html-pdf-output",
        help="HTML/PDF output filename (without extension)",
        required=True,
    )
    parser.add_argument(
        "--nvd-api-key", help="NVD API key for downloading CVE DB", required=False
    )
    parser.add_argument(
        "--exclude-dir", help="Exclude directories while scanning", required=False
    )
    parser.add_argument(
        "--build-command", help="Run build commands before scanning", required=False
    )

    args = parser.parse_args()

    if args.build_command:
        build_output = subprocess.run(
            args.build_command, capture_output=True, text=True
        )
        print(build_output.stdout)
        if build_output.stderr:
            print(build_output.stderr)
            exit(1)

    cve_bin_tool = CVE_BIN_TOOL()
    cve_bin_tool.update_db(args.nvd_api_key)

    available_fixes = cve_bin_tool.scan(
        args.directory,
        formats=["html", "pdf", "json"],
        output=args.html_pdf_output,
        exclude=args.exclude_dir,
    )

    gen_sarif = GenerateSarif(
        repository=args.repo,
        action_run_id=args.run_id,
        json_file_path=f"{args.html_pdf_output}.json",
        available_fixes=available_fixes,
    )
    gen_sarif.write_file(
        output_file=args.sarif_output,
    )
