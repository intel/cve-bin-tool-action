# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

import glob
import json
import subprocess
import tempfile
from pathlib import Path

import yaml

MIRROR = "https://raw.githubusercontent.com/sec-data/mirror-sandbox/main"


class CVE_BIN_TOOL:
    def __init__(self) -> None:
        self.mirror = MIRROR
        self.pubkey = Path(__file__).parent.parent / "assets" / "mirror" / "pub.asc"

    def update_db(self, nvd_api_key):
        command = [
            "cve-bin-tool",
            "--use-mirror",
            self.mirror,
            "--verify",
            str(self.pubkey),
        ]
        if nvd_api_key:
            command.append("--nvd-api-key")
            command.append(nvd_api_key)
        subprocess.run(command)

    def scan(
        self,
        dir,
        scan_mode="repo-only",
        formats=[],
        output=None,
        exclude=None,
        sbom_type=None,
        sbom_format="json",
        sbom_output="SBOM.json",
    ):
        json_data = []
        captured_output = ""
        if scan_mode == "both" or scan_mode == "sbom-only":
            json_data, captured_output = self.__sbom_scan(exclude)
        if scan_mode == "both" or scan_mode == "repo-only":
            command = [
                "cve-bin-tool",
                dir,
                "--detailed",
                "--available-fix",
                "ubuntu-hirsute",
            ]
            if len(formats):
                formats_string = ",".join(formats)
                command.append("--format")
                command.append(formats_string)
            if output:
                command.append("--output-file")
                command.append(output)
            if exclude:
                command.append("--exclude")
                command.append(exclude)
            if sbom_type:
                command.append("--sbom-type")
                command.append(sbom_type)
                command.append("--sbom-format")
                command.append(sbom_format)
                command.append("--sbom-output")
                command.append(sbom_output)
            captured_output += subprocess.run(
                command, capture_output=True, text=True
            ).stdout
            print(captured_output)
            with open(f"{output}.json") as fd:
                try:
                    json_output = json.load(fd)
                except Exception:
                    json_output = []
                for obj in json_output:
                    obj["type"] = "Library"
                json_data += json_output
        with open(f"{output}.json", "w+") as fd:
            json.dump(json_data, fd)
        return self.__extract_available_fix_from_console(captured_output)

    def __extract_available_fix_from_console(self, captured_output):
        fixes = {}
        lines = captured_output.split("\n")
        captured_output = ""
        for line in lines:
            if line.find("INFO") != -1:
                captured_output += "\n"
            captured_output += f'{line.split("debian_cve_tracker.py")[0].strip()} '
        lines = captured_output.split("\n")
        for line in lines:
            if line.find("has available fix in v") == -1:
                continue
            cve_id = (
                line.split("has available fix in v")[0]
                .split("cve_bin_tool")[1]
                .split(":")[1]
                .strip()
            )
            fixed_release = (
                line.split("has available fix in v")[1].split("release")[0].strip()
            )
            fixes[cve_id] = {"fixed_release": fixed_release}
        return fixes

    def __sbom_scan(self, exclude):
        json_data = []
        captured_output = ""
        sboms = self.__sbom_finder(".")
        for sbom in sboms:
            output = str(Path(tempfile.gettempdir()) / "sbom-result")
            command = [
                "cve-bin-tool",
                "--detailed",
                "--available-fix",
                "ubuntu-hirsute",
                "--sbom",
                sbom["type"],
                "--sbom-file",
                sbom["file"],
                "--format",
                "json",
                "--exclude",
                exclude,
                "--output-file",
                output,
            ]
            captured_output += subprocess.run(
                command, capture_output=True, text=True
            ).stdout
            with open(f"{output}.json") as fd:
                try:
                    json_output = json.load(fd)
                except Exception:
                    json_output = []
                for obj in json_output:
                    obj["paths"] = sbom["file"]
                    obj["type"] = "SBOM"
                json_data += json_output
            Path(f"{output}.json").unlink()
        return json_data, captured_output

    def __sbom_finder(self, directory):
        directory = Path(directory).absolute()
        sboms = []
        for file in glob.iglob(str(directory / "**/**"), recursive=True):
            if file.endswith(".spdx"):
                with open(file) as fd:
                    data = fd.read()
                    if data.find("SPDXVersion: SPDX-2.2") != -1:
                        sboms.append({"file": file, "type": "spdx"})
            elif (
                file.endswith(".spdx.rdf")
                or file.endswith(".spdx.xml")
                or file.endswith(".spdx.rdf.xml")
            ):
                with open(file) as fd:
                    data = fd.read()
                    if (
                        data.find("<spdx:specVersion>SPDX-2.2</spdx:specVersion>") != -1
                        or data.find("<spdxVersion>SPDX-2.2</spdxVersion>") != -1
                    ):
                        sboms.append({"file": file, "type": "spdx"})
            elif file.endswith(".spdx.json"):
                with open(file) as fd:
                    try:
                        json_data = json.load(fd)
                    except Exception:
                        json_data = {}
                    if (
                        "spdxVersion" in json_data
                        and json_data["spdxVersion"] == "SPDX-2.2"
                    ):
                        sboms.append({"file": file, "type": "spdx"})
            elif file.endswith(".spdx.yaml") or file.endswith(".spdx.yml"):
                with open(file) as fd:
                    try:
                        yaml_data = yaml.safe_load(fd)
                    except Exception:
                        yaml_data = {}
                    if (
                        "spdxVersion" in yaml_data
                        and yaml_data["spdxVersion"] == "SPDX-2.2"
                    ):
                        sboms.append({"file": file, "type": "spdx"})
            elif file.endswith(".json"):
                with open(file) as fd:
                    try:
                        json_data = json.load(fd)
                    except Exception:
                        json_data = {}
                    if (
                        "bomFormat" in json_data
                        and "specVersion" in json_data
                        and json_data["bomFormat"] == "CycloneDX"
                        and json_data["specVersion"] == "1.3"
                    ):
                        sboms.append({"file": file, "type": "cyclonedx"})
            elif file.endswith(".xml"):
                with open(file) as fd:
                    data = fd.read()
                    if data.find("cyclonedx.org/schema/bom/1.3") != -1:
                        sboms.append({"file": file, "type": "cyclonedx"})
                    elif (
                        data.find("standards.iso.org/iso/19770/-2/2015/schema.xsd")
                        != -1
                    ):
                        sboms.append({"file": file, "type": "swid"})
        return sboms
