import importlib.util
import shutil
import subprocess
import tempfile
from pathlib import Path

from pytest_mock import MockerFixture

cve_bin_tool_path = Path("src") / "cve_bin_tool.py"
cve_bin_tool_spec = importlib.util.spec_from_file_location(
    "cve_bin_tool", cve_bin_tool_path
)
if cve_bin_tool_spec is not None:
    cve_bin_tool = importlib.util.module_from_spec(cve_bin_tool_spec)
    if cve_bin_tool_spec.loader is not None:
        cve_bin_tool_spec.loader.exec_module(cve_bin_tool)


class TestCVEBinaryTool:
    AVAILABLE_FIXES = {
        "CVE-2010-2244": {"fixed_release": "0.6.26-1"},
        "CVE-2011-1002": {"fixed_release": "0.6.28-4"},
        "CVE-2017-6519": {"fixed_release": "0.7-5"},
        "CVE-2021-3468": {"fixed_release": "0.8-5+deb11u2"},
        "CVE-2021-3502": {"fixed_release": "0.8-5+deb11u1"},
    }
    AVAILABLE_FIXES_WITH_SHRINKED_CONSOLE_OUTPUT = {
        "CVE-2018-14394": {"fixed_release": "7:4.0.2-1"},
        "CVE-2018-1999011": {"fixed_release": "7:4.0.2-1"},
        "CVE-2018-1999012": {"fixed_release": "7:4.0.2-1"},
        "CVE-2018-1999013": {"fixed_release": "7:4.0.2-1"},
        "CVE-2018-1999014": {"fixed_release": "7:4.0.2-1"},
        "CVE-2018-1999015": {"fixed_release": "7:4.0.2-1"},
        "CVE-2019-15942": {"fixed_release": "0"},
        "CVE-2021-3566": {"fixed_release": "7:4.3-2"},
        "CVE-2021-38291": {"fixed_release": "7:4.3.3-0+deb11u1"},
        "CVE-2023-22742": {"fixed_release": "1.1.0+dfsg.1-4+deb11u1"},
        "CVE-2021-32558": {"fixed_release": "1:16.16.1~dfsg-1+deb11u1"},
        "CVE-2022-37325": {"fixed_release": "1:16.28.0~dfsg-0+deb11u2"},
        "CVE-2022-42706": {"fixed_release": "1:16.28.0~dfsg-0+deb11u2"},
        "CVE-2018-10916": {"fixed_release": "4.8.4-1"},
        "CVE-2021-23177": {"fixed_release": "3.4.3-2+deb11u1"},
        "CVE-2021-31566": {"fixed_release": "3.4.3-2+deb11u1"},
        "CVE-2010-4252": {"fixed_release": "0"},
        "CVE-2010-5298": {"fixed_release": "1.0.1g-3"},
        "CVE-2011-1945": {"fixed_release": "1.0.0e-1"},
        "CVE-2011-4108": {"fixed_release": "1.0.0f-1"},
        "CVE-2011-4576": {"fixed_release": "1.0.0f-1"},
        "CVE-2011-4577": {"fixed_release": "1.0.0f-1"},
        "CVE-2011-4619": {"fixed_release": "1.0.0h-1"},
        "CVE-2012-0027": {"fixed_release": "1.0.0f-1"},
        "CVE-2013-6449": {"fixed_release": "1.0.1e-5"},
        "CVE-2014-0076": {"fixed_release": "1.0.1g-1"},
        "CVE-2015-4000": {"fixed_release": "1.0.2b-1"},
        "CVE-2016-2106": {"fixed_release": "1.0.2h-1"},
        "CVE-2016-2107": {"fixed_release": "1.0.2h-1"},
        "CVE-2016-2108": {"fixed_release": "1.0.2c-1"},
        "CVE-2016-2109": {"fixed_release": "1.0.2h-1"},
        "CVE-2016-2176": {"fixed_release": "0"},
        "CVE-2016-7056": {"fixed_release": "1.0.2a-1"},
        "CVE-2021-4044": {"fixed_release": "0"},
        "CVE-2010-2477": {"fixed_release": "1.7.4-1"},
    }
    SBOM_OUTPUT = {
        "spdx_test.spdx.yaml": "spdx",
        "cyclonedx_test.xml": "cyclonedx",
        "spdx_test.spdx.xml": "spdx",
        "spdx_test.spdx.yml": "spdx",
        "spdx_test.spdx.rdf": "spdx",
        "spdx_test.spdx.json": "spdx",
        "swid_test.xml": "swid",
        "cyclonedx_test.json": "cyclonedx",
        "spdx_mixed_test.spdx.json": "spdx",
        "spdx_test.spdx": "spdx",
        "cyclonedx_mixed_test.json": "cyclonedx",
        "cyclonedx_test2.json": "cyclonedx",
    }

    @classmethod
    def setup_class(cls):
        cls.tmp_dir = Path(tempfile.mkdtemp(prefix="cve-bin-tool-scanner-"))
        (cls.tmp_dir / "report.json").touch()

    @classmethod
    def teardown_class(cls):
        shutil.rmtree(cls.tmp_dir)

    def test_update_db(self, mocker: MockerFixture):
        mocker.patch("subprocess.run")
        spy_subprocess = mocker.spy(subprocess, "run")
        cve_bin_tool_scanner = cve_bin_tool.CVE_BIN_TOOL()
        cve_bin_tool_scanner.update_db("NVD_API_KEY")
        spy_subprocess.assert_called_once_with(
            [
                "cve-bin-tool",
                "--use-mirror",
                "https://raw.githubusercontent.com/sec-data/mirror-sandbox/main",
                "--verify",
                str((Path(".").parent / "assets" / "mirror" / "pub.asc").absolute()),
                "--nvd-api-key",
                "NVD_API_KEY",
            ]
        )
        mocker.stopall()

    def test_scanner(self, mocker: MockerFixture):
        mocker.patch("subprocess.run", self.__return_console_output)
        spy_subprocess = mocker.spy(subprocess, "run")
        cve_bin_tool_scanner = cve_bin_tool.CVE_BIN_TOOL()
        available_fixes = cve_bin_tool_scanner.scan(
            ".",
            formats=["html", "pdf", "json"],
            output=str(self.tmp_dir / "report"),
            exclude="test",
        )
        spy_subprocess.assert_called_once_with(
            [
                "cve-bin-tool",
                ".",
                "--detailed",
                "--available-fix",
                "ubuntu-hirsute",
                "--format",
                "html,pdf,json",
                "--output-file",
                str(self.tmp_dir / "report"),
                "--exclude",
                "test",
            ],
            capture_output=True,
            text=True,
        )
        assert available_fixes.items() >= self.AVAILABLE_FIXES.items()
        mocker.stopall()

    def test_sbom_finder(self):
        cve_bin_tool_scanner = cve_bin_tool.CVE_BIN_TOOL()
        sboms = cve_bin_tool_scanner.sbom_finder(
            Path("test") / "sbom",
        )
        for sbom in sboms:
            assert self.SBOM_OUTPUT[str(Path(sbom["name"]).name)] == sbom["type"]

    def test_available_fixes_parsing(self, mocker: MockerFixture):
        mocker.patch("subprocess.run", self.__return_console_output_shrinked)
        spy_subprocess = mocker.spy(subprocess, "run")
        cve_bin_tool_scanner = cve_bin_tool.CVE_BIN_TOOL()
        available_fixes = cve_bin_tool_scanner.scan(
            ".",
            formats=["html", "pdf", "json"],
            output=str(self.tmp_dir / "report"),
            exclude="test",
        )
        spy_subprocess.assert_called_once_with(
            [
                "cve-bin-tool",
                ".",
                "--detailed",
                "--available-fix",
                "ubuntu-hirsute",
                "--format",
                "html,pdf,json",
                "--output-file",
                str(self.tmp_dir / "report"),
                "--exclude",
                "test",
            ],
            capture_output=True,
            text=True,
        )
        assert (
            available_fixes.items()
            >= self.AVAILABLE_FIXES_WITH_SHRINKED_CONSOLE_OUTPUT.items()
        )
        mocker.stopall()

    def __return_console_output(self, args, capture_output, text):
        class ConsoleOutput:
            def __init__(self, stdout) -> None:
                self.stdout = stdout

        with open(Path("test") / "sample_reports" / "console_output.txt") as fd:
            return ConsoleOutput(fd.read())

    def __return_console_output_shrinked(self, args, capture_output, text):
        class ConsoleOutput:
            def __init__(self, stdout) -> None:
                self.stdout = stdout

        with open(
            Path("test") / "sample_reports" / "console_output_shrinked.txt"
        ) as fd:
            return ConsoleOutput(fd.read())
